using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Collections;

namespace MinecraftServerSetup
{
    public class MinecraftServerProperties: IDictionary<string, string>
    {
        Dictionary<string, string> properties;

        public MinecraftServerProperties(string filePath)
        {
            properties = new Dictionary<string, string>();

            var sr = new StreamReader(filePath);

            while(!sr.EndOfStream)
            {
                var line = sr.ReadLine();
                if (string.IsNullOrWhiteSpace(line) || line.StartsWith("#"))
                    continue;

                var pair = line.Split('=');
                if (pair.Length > 1)
                    properties[pair[0]] = pair[1];
                else
                    properties[pair[0]] = "";
            }

            sr.Close();
        }

        public string this[string key]
        {
            get
            {
                return properties[key];
            }

            set
            {
                properties[key] = value;
            }
        }

        public int Count
        {
            get
            {
                return properties.Count;
            }
        }

        public bool IsReadOnly
        {
            get
            {
                return false;
            }
        }

        public ICollection<string> Keys
        {
            get
            {
                return properties.Keys;
            }
        }

        public ICollection<string> Values
        {
            get
            {
                return properties.Values;
            }
        }

        public void Add(KeyValuePair<string, string> item)
        {
            properties.Add(item.Key, item.Value);
        }

        public void Add(string key, string value)
        {
            properties.Add(key, value);
        }

        public void Clear()
        {
            properties.Clear();
        }

        public bool Contains(KeyValuePair<string, string> item)
        {
            return properties.Contains(item);
        }

        public bool ContainsKey(string key)
        {
            return properties.ContainsKey(key);
        }

        public void CopyTo(KeyValuePair<string, string>[] array, int arrayIndex)
        {
            foreach (var pair in properties)
                array[arrayIndex++] = pair;
        }

        public IEnumerator<KeyValuePair<string, string>> GetEnumerator()
        {
            return properties.GetEnumerator();
        }

        public bool Remove(KeyValuePair<string, string> item)
        {
            return properties.ContainsKey(item.Key) && properties[item.Key] == item.Value && Remove(item.Key);
        }

        public bool Remove(string key)
        {
            return properties.Remove(key);
        }

        public bool TryGetValue(string key, out string value)
        {
            if (!properties.ContainsKey(key))
            {
                value = "";
                return false;
            }

            value = properties[key];
            return true;
        }

        public void WriteToFile(string path)
        {
            var sw = new StreamWriter(path, false);

            sw.WriteLine("# Minecraft Server Properties generated by the Unofficial Windows Minecraft Server Setup Utility");
            sw.WriteLine("# {0}", DateTime.Now.ToString());

            foreach (var pair in properties)
                sw.WriteLine("{0}={1}", pair.Key, pair.Value);

            sw.Flush();
            sw.Close();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }
    }
}
